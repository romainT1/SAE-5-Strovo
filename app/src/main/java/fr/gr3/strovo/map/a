package com.example.tptodolist;
import androidx.appcompat.app.AppCompatActivity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.ContextMenu;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
/**
 * L'activité affiche une liste de tâches à réaliser
 * L'utilisateur a ensuite la possibilité de rajouter des tâches
 * et aussi d'en supprimer, ou de modifier un libellé de tâche.
 * Ces modifications de la liste s'effectuent via un menu contextuel.
 * Un menu d'option permet de vider la liste ou de modifier son titre
 * Dans cette version, la persistance des données n'est pas gérée
 *
 * @author Servières
 * @version 1.0
 */
public class MainActivity extends AppCompatActivity {


    private static final String NOM_FICHIER = "lefichiertaches";
    private static final String TAG = "TodoTaches";

    private SharedPreferences mesPreferences;

    private SharedPreferences.Editor editor;
    /**
     * Liste contenant les taches à réaliser
     */
    private ArrayList<String> listeTache;
    /**
     * Adaptateur permettant de gérer la liste des tâches
     */
    private ArrayAdapter<String> adaptateur;
    /**
     * TextView permettant d'afficher le titre de la liste
     */
    private TextView widgetTitre;
    /**
     * ListView qui affiche la liste des tâches à faire
     */
    private ListView widgetListe;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layout_todo);
        mesPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
        editor = mesPreferences.edit();
        widgetTitre = findViewById(R.id.titre_liste);
        widgetListe = findViewById(R.id.liste_tache);
        widgetTitre.setText(mesPreferences.getString("titre", "Todo List"));
        // création de la liste des tâches et de l'adaptateur
        listeTache = new ArrayList<>();

        widgetListe.setAdapter(adaptateur);
        // on précise qu'un menu est associé à la liste widgetListe
        registerForContextMenu(widgetListe);
        String todo;
        try {
            InputStreamReader fichier =
                    new InputStreamReader(openFileInput(NOM_FICHIER));
            BufferedReader fichierTexte = new BufferedReader(fichier);
            while ( (todo = fichierTexte.readLine())!= null ) {
                listeTache.add(todo);
            }
            fichier.close();
        } catch (FileNotFoundException e) {
            Log.e(TAG, "Le fichier " + NOM_FICHIER + " n'existe pas.");
        } catch (IOException e) {
            Log.e(TAG, "Problème de lecture dans le fichier " + NOM_FICHIER);
        }
        if (listeTache.size() == 0) {
            listeTache.add(getString(R.string.invite_saisie));
        }
        // On crée un adaptateur pour rassembler les données à afficher
        adaptateur = new ArrayAdapter<String>(this,
                        android.R.layout.simple_list_item_1,
                        listeTache);
        widgetListe.setAdapter(adaptateur);

    }
    @Override
    public void onStop() {
        // placer le code ici (libération de mémoire, fermeture de
        // fichiers, de connexion à une base de données et autres opérations de "nettoyage"...)

        System.out.print("###############################");
        FileOutputStream fichier = null;
        try {
            fichier = openFileOutput(NOM_FICHIER, Context.MODE_PRIVATE);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        String data = "";
        for (String tache : listeTache) {
            // écriture, dans le fichier, de la chaîne encodée en binaire
            data += tache + "\n";
        }
        try {
            fichier.write(data.getBytes());
            fichier.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        super.onStop();
    }

    /* ===============================================================================
     * 2 méthodes pour gérer le menu CONTEXTUEL
     * ===============================================================================
     */
    /**
     * Méthode invoquée automatiquement lorsque l'utiisateur active le menu contextuel
     */
    @Override
    public void onCreateContextMenu(ContextMenu menu, View v,
                                    ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        /*
         * on désérialise le fichier XML décriant le menu et on l'associe
         * au menu argument (celui qui a été activé)
         */
        new MenuInflater(this).inflate(R.menu.menucontextuel, menu);
    }
    /**
     * Méthode invoquée automatiquement lorsque l'utilisateur choisit une option
     * dans un menu contextuel
     */
    @Override
    public boolean onContextItemSelected(MenuItem item) {
        /*
         * on accède à des informations supplémentaires sur la vue associée
         * au menu activé. L'information qui nous intéresse est la position
         * de l'élément de la liste sur lequel l'utilisateur a cliqué pour
         * activer le menu.
         */
        AdapterView.AdapterContextMenuInfo information =
                (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
        // selon l'option sélectionnée dans le menu, on réalise le traitement adéquat
        switch (item.getItemId()) {
            case R.id.modification: // modification de la tâche courante
                saisirTacheAModifier(information.position);
                break;
            case R.id.ajout_avant: // ajout d'une tâche avant la tâche courante
                saisirTacheAAjouter(information.position);
                break;
            case R.id.ajout_apres: // ajout d'une tâche après la tâche courante
                saisirTacheAAjouter(information.position + 1);
                break;
            case R.id.suppression: // suppression de la tâche courante
                // on supprime de l'adaptateur la tâche courante
                adaptateur.remove(listeTache.get(information.position));
                gererListeVide();
                break;
            case R.id.annuler: // retour à la liste principale
                break;
        }
        return (super.onContextItemSelected(item));
    }
    /**
     * Méthode invoquée à la création du menu d'option
     *
     * @param menu menu d'option à créer
     * @return un booléen vrai si création correcte
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        new MenuInflater(this).inflate(R.menu.menuoption, menu);
        return super.onCreateOptionsMenu(menu);
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // réaliser l'opération souhaitée par l'utilisateur
        switch (item.getItemId()) {
            case R.id.vider: // supprime toutes les tâches
                adaptateur.clear();
                gererListeVide();
                break;
            case R.id.modifier_titre: // saisir et modifier le titre
                saisirNouveauTitre();
                break;
        }
        return super.onOptionsItemSelected(item);
    }
    /* ===============================================================================
     * Saisies et modification de tâches
     * ===============================================================================
     */
    /**
     * Cette méthode affiche une boîte de dialogue permettant à l'utilsiateur de
     * saisir une nouvelle tâche. Cette tâche est ensuite ajoutée à la liste
     *
     * @param positionAjout un entier égal à une position dans la liste.
     * L'ajout de la tâche saisie se fera sur cette position
     */
    private void saisirTacheAAjouter(final int positionAjout) {
        // on désérialise le layout qui est associé à la boîte de saisie
        final View boiteAjoutTache =
                getLayoutInflater().inflate(R.layout.saisie_tache, null);
        /*
         * Création d'une boîte de dialogue pour saisir une nouvelle tâche
         */
        new AlertDialog.Builder(this)
                .setTitle(getResources().getString(R.string.titre_boite_tache))
                .setView(boiteAjoutTache)
                .setPositiveButton(getResources().getString(R.string.bouton_positif),
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog,
                                                int leBouton) {
                                EditText article =
                                boiteAjoutTache.findViewById(R.id.saisieTache);
                                String tacheSaisie = article.getText().toString();
                                if (gererSuppressionInviteListe()) {
                                    // la suppression de l'invite a été faite
                                    listeTache.add(0, tacheSaisie);
                                } else {
                                    listeTache.add(positionAjout, tacheSaisie);
                                }
                                adaptateur.notifyDataSetChanged();
                            }
                        })
                .setNegativeButton(getResources().getString(R.string.bouton_negatif),
                        null)
                .show();
    }
    /**
     * Cette méthode affiche une boîte de dialogue permettant à l'utilisateur de
     * modifier une tâche de la liste
     *
     * @param positionModification un entier égal à une position dans la liste.
     * La tâche à modifier est celle située à cette position
     */
    private void saisirTacheAModifier(final int positionModification) {
        // on désérialise le layout qui est associé à la boîte de saisie
        final View boiteAjoutArticle =
                getLayoutInflater().inflate(R.layout.saisie_tache, null);
        /*
         * Création d'une boîte de dialogue pour saisir le nouveau
         * libellé de la tâche
         */
        new AlertDialog.Builder(this)
                .setTitle(getResources().getString(R.string.titre_boite_tache))
                .setView(boiteAjoutArticle)
                .setPositiveButton(getResources().getString(R.string.bouton_positif),
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog,
                                                int leBouton) {
                                EditText tache =
                                        boiteAjoutArticle.findViewById(R.id.saisieTache);
                                String tacheSaisie = tache.getText().toString();
                                listeTache.set(positionModification, tacheSaisie);
                                adaptateur.notifyDataSetChanged();
                            }
                        })
                .setNegativeButton(getResources().getString(R.string.bouton_negatif),
                        null)
                .show();
    }
    /* ===============================================================================
     * Saisie du nouveau titre
     * ===============================================================================
     */
    /**
     * Cette méthode affiche une boîte de dialogue permettant à l'utilsiateur de
     * saisir un nouveau titre pour la liste
     */
    private void saisirNouveauTitre() {
        // on désérialise le layout qui est associé à la boîte de saisie
        final View boiteSaisieTitre =
                getLayoutInflater().inflate(R.layout.saisie_titre, null);
        /*
         * Création d'une boîte de dialogue pour saisir le titre
         */
        new AlertDialog.Builder(this, androidx.appcompat.R.style.AlertDialog_AppCompat)
                .setTitle(getResources().getString(R.string.titre_boite_titre))
                .setView(boiteSaisieTitre)
                .setPositiveButton(getResources().getString(R.string.bouton_positif),
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog,
                                                int leBouton) {
                                EditText libelle = (EditText)
                                        boiteSaisieTitre.findViewById(R.id.saisieTitre);
                                String nouveauTitre;
                                nouveauTitre = libelle.getText().toString();
                                if (nouveauTitre.length() == 0) {
                                    nouveauTitre = getString(R.string.nom_liste_defaut);
                                }
                                widgetTitre.setText(nouveauTitre);
                                editor.putString("titre", nouveauTitre);
                                editor.apply();
                            }
                        })
                .setNegativeButton(getResources().getString(R.string.bouton_negatif),
                        null)
                .show();
    }
    /* ===============================================================================
     * gestion du cas particulier de la liste des tâches vide
     * ===============================================================================
     */
    /**
     * Gère le cas particulier où la liste des tâches serait devenue vide.
     * Dans ce cas, l'élément "..." est ajouté à la liste
     */
    private void gererListeVide() {
        if (adaptateur.isEmpty()) {
            adaptateur.add(getString(R.string.invite_saisie));
        }
    }
    /**
     * Gère la suppression éventuelle de l'invite de saisie d'une tâche.
     * Cette invite de saisie est affichée si la liste réelle des tâche est vide
     * @return un booléen égal à vrai si l'invite de saisie a été supprimée
     */
    private boolean gererSuppressionInviteListe() {
        boolean suppressionEffectuee = false;
        if (listeTache.size() == 1
                && listeTache.get(0).equals(getString(R.string.invite_saisie))) {
            /*
             * la liste affiche un seul élément qui est l'invite de saisie
             * il faut supprimer cet élément
             */
            listeTache.clear();
            suppressionEffectuee = true;
        }
        return suppressionEffectuee;
    }
}